; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bt_log.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bt_log.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\Middleware\blue_angel\inc -I..\..\Middleware\bt_callback_manager -I..\..\Middleware\blue_angel\btif -I..\..\Middleware\blue_angel\common -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\src\common -I..\..\Middleware\blue_angel\src\inc -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\platform\rtos -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\ut_manager\Cunit\Headers -I..\..\Middleware\ut_manager\Cunit\interface -I..\..\Middleware\blue_angel\platform\test -I..\..\Middleware\blue_angel\driver -I..\..\Middleware\blue_angel\src\core\hci -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=522 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DNDEBUG --omf_browse=.\flash\obj\bt_log.crf ..\..\Middleware\blue_angel\platform\bt_log.c]
                          THUMB

                          AREA ||i.bt_hci_log||, CODE, READONLY, ALIGN=2

                  bt_hci_log PROC
;;;11     
;;;12     void bt_hci_log(bt_hci_log_type_t type, uint8_t *log, uint16_t log_length)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;13     {
000004  4681              MOV      r9,r0
000006  468a              MOV      r10,r1
000008  4617              MOV      r7,r2
;;;14     #if BT_HCI_LOG_MIX_SYSTEM_LOG
;;;15     	return;
;;;16     #endif
;;;17     	uint16_t data_tatal_length = 0;
00000a  f04f0800          MOV      r8,#0
;;;18     	uint16_t index = 0, i = 0;
00000e  2500              MOVS     r5,#0
000010  2600              MOVS     r6,#0
;;;19     	uint8_t *buf = NULL;
000012  2400              MOVS     r4,#0
;;;20     	uint8_t check_sum = 0;
000014  46a3              MOV      r11,r4
;;;21     	data_tatal_length = BT_HCI_LOG_HEADER_LEGNTH + log_length + 1;//1:check sum
000016  1db8              ADDS     r0,r7,#6
000018  fa1ff880          UXTH     r8,r0
;;;22     	buf = (uint8_t *)bt_memory_allocate_packet(BT_MEMORY_TX, data_tatal_length);
00001c  4641              MOV      r1,r8
00001e  2000              MOVS     r0,#0
000020  f7fffffe          BL       bt_memory_allocate_packet
000024  4604              MOV      r4,r0
;;;23     	BT_ASSERT(buf);
000026  b104              CBZ      r4,|L1.42|
000028  e003              B        |L1.50|
                  |L1.42|
00002a  2117              MOVS     r1,#0x17
00002c  a01f              ADR      r0,|L1.172|
00002e  f7fffffe          BL       assert_failed
                  |L1.50|
;;;24     
;;;25     	buf[index++] = 0xF5;
000032  22f5              MOVS     r2,#0xf5
000034  4628              MOV      r0,r5
000036  1c69              ADDS     r1,r5,#1
000038  b28d              UXTH     r5,r1
00003a  5422              STRB     r2,[r4,r0]
;;;26     	buf[index++] = 0x5A;
00003c  225a              MOVS     r2,#0x5a
00003e  4628              MOV      r0,r5
000040  1c69              ADDS     r1,r5,#1
000042  b28d              UXTH     r5,r1
000044  5422              STRB     r2,[r4,r0]
;;;27     	buf[index++] = type;
000046  4628              MOV      r0,r5
000048  1c69              ADDS     r1,r5,#1
00004a  b28d              UXTH     r5,r1
00004c  f8049000          STRB     r9,[r4,r0]
;;;28     	buf[index++] = log_length & 0xFF;
000050  4628              MOV      r0,r5
000052  1c69              ADDS     r1,r5,#1
000054  b28d              UXTH     r5,r1
000056  5427              STRB     r7,[r4,r0]
;;;29     	buf[index++] = (log_length >> 8) & 0xFF;
000058  0a3a              LSRS     r2,r7,#8
00005a  4628              MOV      r0,r5
00005c  1c69              ADDS     r1,r5,#1
00005e  b28d              UXTH     r5,r1
000060  5422              STRB     r2,[r4,r0]
;;;30     	for (i = 0;i < log_length;index++, i++) {
000062  2600              MOVS     r6,#0
000064  e006              B        |L1.116|
                  |L1.102|
;;;31     		buf[index] = log[i];
000066  f81a0006          LDRB     r0,[r10,r6]
00006a  5560              STRB     r0,[r4,r5]
00006c  1c68              ADDS     r0,r5,#1              ;30
00006e  b285              UXTH     r5,r0                 ;30
000070  1c70              ADDS     r0,r6,#1              ;30
000072  b286              UXTH     r6,r0                 ;30
                  |L1.116|
000074  42be              CMP      r6,r7                 ;30
000076  dbf6              BLT      |L1.102|
;;;32     	}
;;;33     	for (i = 0; i < data_tatal_length - 1;i++) {
000078  2600              MOVS     r6,#0
00007a  e005              B        |L1.136|
                  |L1.124|
;;;34     		check_sum += buf[i];
00007c  5da0              LDRB     r0,[r4,r6]
00007e  4458              ADD      r0,r0,r11
000080  f0000bff          AND      r11,r0,#0xff
000084  1c70              ADDS     r0,r6,#1              ;33
000086  b286              UXTH     r6,r0                 ;33
                  |L1.136|
000088  f1a80001          SUB      r0,r8,#1              ;33
00008c  42b0              CMP      r0,r6                 ;33
00008e  dcf5              BGT      |L1.124|
;;;35     	}
;;;36     	buf[index] = check_sum;
000090  f804b005          STRB     r11,[r4,r5]
;;;37     
;;;38     	comSendBuf(COM3, buf, data_tatal_length);
000094  4642              MOV      r2,r8
000096  4621              MOV      r1,r4
000098  2002              MOVS     r0,#2
00009a  f7fffffe          BL       comSendBuf
;;;39     	
;;;40     	bt_memory_free_packet(BT_MEMORY_TX, buf);
00009e  4621              MOV      r1,r4
0000a0  2000              MOVS     r0,#0
0000a2  f7fffffe          BL       bt_memory_free_packet
;;;41     }
0000a6  e8bd9ff0          POP      {r4-r12,pc}
                          ENDP

0000aa  0000              DCW      0x0000
                  |L1.172|
0000ac  2e2e5c2e          DCB      "..\\..\\Middleware\\blue_angel\\platform\\bt_log.c",0
0000b0  2e5c4d69
0000b4  64646c65
0000b8  77617265
0000bc  5c626c75
0000c0  655f616e
0000c4  67656c5c
0000c8  706c6174
0000cc  666f726d
0000d0  5c62745f
0000d4  6c6f672e
0000d8  6300    
0000da  00                DCB      0
0000db  00                DCB      0

;*** Start embedded assembler ***

#line 1 "..\\..\\Middleware\\blue_angel\\platform\\bt_log.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_bt_log_c_56da0be1____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_bt_log_c_56da0be1____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_bt_log_c_56da0be1____REVSH|
#line 128
|__asm___8_bt_log_c_56da0be1____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
