; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bt_test.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bt_test.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\Middleware\blue_angel\inc -I..\..\Middleware\bt_callback_manager -I..\..\Middleware\blue_angel\btif -I..\..\Middleware\blue_angel\common -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\src\common -I..\..\Middleware\blue_angel\src\inc -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\platform\rtos -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\ut_manager\Cunit\Headers -I..\..\Middleware\ut_manager\Cunit\interface -I..\..\Middleware\blue_angel\platform\test -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=522 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DNDEBUG --omf_browse=.\flash\obj\bt_test.crf ..\..\Middleware\blue_angel\platform\test\bt_test.c]
                          THUMB

                          AREA ||i.bt_linknode_test||, CODE, READONLY, ALIGN=2

                  bt_linknode_test PROC
;;;19     
;;;20     void bt_linknode_test(void) 
000000  b530              PUSH     {r4,r5,lr}
;;;21     { 
000002  b08f              SUB      sp,sp,#0x3c
;;;22     	bt_linknode_t head;
;;;23     	uint32_t timer_id = 0xFFFF;
000004  f64f70ff          MOV      r0,#0xffff
000008  900d              STR      r0,[sp,#0x34]
;;;24     	bt_timer_t timer = {
00000a  2214              MOVS     r2,#0x14
00000c  4968              LDR      r1,|L1.432|
00000e  a808              ADD      r0,sp,#0x20
000010  f7fffffe          BL       __aeabi_memcpy4
;;;25     		NULL,
;;;26     		0xFFFF,
;;;27     		0x1234,
;;;28     		0x100,
;;;29     		NULL
;;;30     		};
;;;31     	bt_timer_t timer1 = {
000014  2214              MOVS     r2,#0x14
000016  4966              LDR      r1,|L1.432|
000018  3114              ADDS     r1,r1,#0x14
00001a  a803              ADD      r0,sp,#0xc
00001c  f7fffffe          BL       __aeabi_memcpy4
;;;32     		NULL,
;;;33     		0xFFFE,
;;;34     		0x1233,
;;;35     		0x101,
;;;36     		NULL
;;;37     		};
;;;38     	bt_linknode_t *tmp_node = NULL;
000020  2500              MOVS     r5,#0
;;;39     	bt_timer_t *tmp_timer = NULL;
000022  2400              MOVS     r4,#0
;;;40     	bt_linknode_insert_node(&head, (bt_linknode_t *)&timer, BT_NODE_FRONT);
000024  2201              MOVS     r2,#1
000026  a908              ADD      r1,sp,#0x20
000028  a80e              ADD      r0,sp,#0x38
00002a  f7fffffe          BL       bt_linknode_insert_node
;;;41     	bt_linknode_insert_node(&head, (bt_linknode_t *)&timer1, BT_NODE_FRONT);	
00002e  2201              MOVS     r2,#1
000030  a903              ADD      r1,sp,#0xc
000032  a80e              ADD      r0,sp,#0x38
000034  f7fffffe          BL       bt_linknode_insert_node
;;;42     	/*tmp_node = bt_linknode_delete_node(&head, BT_NODE_FRONT);
;;;43     	CU_ASSERT(tmp_node == (bt_linknode_t *)&timer); 
;;;44     	tmp_timer = (bt_timer_t *)(tmp_node);
;;;45     	CU_ASSERT(tmp_timer->next == NULL);
;;;46     	CU_ASSERT(tmp_timer->timer_id == 0xFFFF);
;;;47     	CU_ASSERT(tmp_timer->data == 0x1234);
;;;48     	CU_ASSERT(tmp_timer->time_ms == 0x100);
;;;49     	CU_ASSERT(tmp_timer->timeout_cb == NULL);
;;;50     	CU_ASSERT(head.next == NULL);*/
;;;51     	tmp_node = bt_linknode_travel_node(&head, bt_timer_cmp_by_timerid, &timer_id);
000038  aa0d              ADD      r2,sp,#0x34
00003a  495e              LDR      r1,|L1.436|
00003c  a80e              ADD      r0,sp,#0x38
00003e  f7fffffe          BL       bt_linknode_travel_node
000042  4605              MOV      r5,r0
;;;52     	tmp_timer = (bt_timer_t *)(tmp_node->next);
000044  682c              LDR      r4,[r5,#0]
;;;53     	CU_ASSERT(tmp_timer == &timer);
000046  2000              MOVS     r0,#0
000048  a15b              ADR      r1,|L1.440|
00004a  e9cd1000          STRD     r1,r0,[sp,#0]
00004e  a908              ADD      r1,sp,#0x20
000050  428c              CMP      r4,r1
000052  d101              BNE      |L1.88|
000054  2101              MOVS     r1,#1
000056  e000              B        |L1.90|
                  |L1.88|
000058  2100              MOVS     r1,#0
                  |L1.90|
00005a  4608              MOV      r0,r1
00005c  a357              ADR      r3,|L1.444|
00005e  a264              ADR      r2,|L1.496|
000060  2135              MOVS     r1,#0x35
000062  f7fffffe          BL       CU_assertImplementation
;;;54     	CU_ASSERT(tmp_timer->timer_id == 0xFFFF);
000066  2000              MOVS     r0,#0
000068  a153              ADR      r1,|L1.440|
00006a  e9cd1000          STRD     r1,r0,[sp,#0]
00006e  f64f72ff          MOV      r2,#0xffff
000072  6861              LDR      r1,[r4,#4]
000074  4291              CMP      r1,r2
000076  d101              BNE      |L1.124|
000078  2101              MOVS     r1,#1
00007a  e000              B        |L1.126|
                  |L1.124|
00007c  2100              MOVS     r1,#0
                  |L1.126|
00007e  4608              MOV      r0,r1
000080  a34e              ADR      r3,|L1.444|
000082  a260              ADR      r2,|L1.516|
000084  2136              MOVS     r1,#0x36
000086  f7fffffe          BL       CU_assertImplementation
;;;55     	CU_ASSERT(tmp_timer->data == 0x1234);
00008a  2000              MOVS     r0,#0
00008c  a14a              ADR      r1,|L1.440|
00008e  e9cd1000          STRD     r1,r0,[sp,#0]
000092  f2412234          MOV      r2,#0x1234
000096  68a1              LDR      r1,[r4,#8]
000098  4291              CMP      r1,r2
00009a  d101              BNE      |L1.160|
00009c  2101              MOVS     r1,#1
00009e  e000              B        |L1.162|
                  |L1.160|
0000a0  2100              MOVS     r1,#0
                  |L1.162|
0000a2  4608              MOV      r0,r1
0000a4  a345              ADR      r3,|L1.444|
0000a6  a25f              ADR      r2,|L1.548|
0000a8  2137              MOVS     r1,#0x37
0000aa  f7fffffe          BL       CU_assertImplementation
;;;56     	CU_ASSERT(tmp_timer->time_ms == 0x100);
0000ae  2000              MOVS     r0,#0
0000b0  a141              ADR      r1,|L1.440|
0000b2  e9cd1000          STRD     r1,r0,[sp,#0]
0000b6  68e1              LDR      r1,[r4,#0xc]
0000b8  f5b17f80          CMP      r1,#0x100
0000bc  d101              BNE      |L1.194|
0000be  2101              MOVS     r1,#1
0000c0  e000              B        |L1.196|
                  |L1.194|
0000c2  2100              MOVS     r1,#0
                  |L1.196|
0000c4  4608              MOV      r0,r1
0000c6  a33d              ADR      r3,|L1.444|
0000c8  a25d              ADR      r2,|L1.576|
0000ca  2138              MOVS     r1,#0x38
0000cc  f7fffffe          BL       CU_assertImplementation
;;;57     	CU_ASSERT(tmp_timer->timeout_cb == NULL);
0000d0  2000              MOVS     r0,#0
0000d2  a139              ADR      r1,|L1.440|
0000d4  e9cd1000          STRD     r1,r0,[sp,#0]
0000d8  6921              LDR      r1,[r4,#0x10]
0000da  b909              CBNZ     r1,|L1.224|
0000dc  2101              MOVS     r1,#1
0000de  e000              B        |L1.226|
                  |L1.224|
0000e0  2100              MOVS     r1,#0
                  |L1.226|
0000e2  4608              MOV      r0,r1
0000e4  a335              ADR      r3,|L1.444|
0000e6  a25d              ADR      r2,|L1.604|
0000e8  2139              MOVS     r1,#0x39
0000ea  f7fffffe          BL       CU_assertImplementation
;;;58     
;;;59     	timer_id = 0xFFFE;
0000ee  f64f70fe          MOV      r0,#0xfffe
0000f2  900d              STR      r0,[sp,#0x34]
;;;60     	tmp_node = bt_linknode_travel_node(&head, bt_timer_cmp_by_timerid, &timer_id);
0000f4  aa0d              ADD      r2,sp,#0x34
0000f6  492f              LDR      r1,|L1.436|
0000f8  a80e              ADD      r0,sp,#0x38
0000fa  f7fffffe          BL       bt_linknode_travel_node
0000fe  4605              MOV      r5,r0
;;;61     	tmp_timer = (bt_timer_t *)(tmp_node->next);
000100  682c              LDR      r4,[r5,#0]
;;;62     	CU_ASSERT(tmp_timer == &timer1);
000102  2000              MOVS     r0,#0
000104  a12c              ADR      r1,|L1.440|
000106  e9cd1000          STRD     r1,r0,[sp,#0]
00010a  a903              ADD      r1,sp,#0xc
00010c  428c              CMP      r4,r1
00010e  d101              BNE      |L1.276|
000110  2101              MOVS     r1,#1
000112  e000              B        |L1.278|
                  |L1.276|
000114  2100              MOVS     r1,#0
                  |L1.278|
000116  4608              MOV      r0,r1
000118  a328              ADR      r3,|L1.444|
00011a  a258              ADR      r2,|L1.636|
00011c  213e              MOVS     r1,#0x3e
00011e  f7fffffe          BL       CU_assertImplementation
;;;63     	CU_ASSERT(tmp_timer->timer_id == 0xFFFE);
000122  2000              MOVS     r0,#0
000124  a124              ADR      r1,|L1.440|
000126  e9cd1000          STRD     r1,r0,[sp,#0]
00012a  f64f72fe          MOV      r2,#0xfffe
00012e  6861              LDR      r1,[r4,#4]
000130  4291              CMP      r1,r2
000132  d101              BNE      |L1.312|
000134  2101              MOVS     r1,#1
000136  e000              B        |L1.314|
                  |L1.312|
000138  2100              MOVS     r1,#0
                  |L1.314|
00013a  4608              MOV      r0,r1
00013c  a31f              ADR      r3,|L1.444|
00013e  a255              ADR      r2,|L1.660|
000140  213f              MOVS     r1,#0x3f
000142  f7fffffe          BL       CU_assertImplementation
;;;64     	CU_ASSERT(tmp_timer->data == 0x1233);
000146  2000              MOVS     r0,#0
000148  a11b              ADR      r1,|L1.440|
00014a  e9cd1000          STRD     r1,r0,[sp,#0]
00014e  f2412233          MOV      r2,#0x1233
000152  68a1              LDR      r1,[r4,#8]
000154  4291              CMP      r1,r2
000156  d101              BNE      |L1.348|
000158  2101              MOVS     r1,#1
00015a  e000              B        |L1.350|
                  |L1.348|
00015c  2100              MOVS     r1,#0
                  |L1.350|
00015e  4608              MOV      r0,r1
000160  a316              ADR      r3,|L1.444|
000162  a254              ADR      r2,|L1.692|
000164  2140              MOVS     r1,#0x40
000166  f7fffffe          BL       CU_assertImplementation
;;;65     	CU_ASSERT(tmp_timer->time_ms == 0x101);
00016a  2000              MOVS     r0,#0
00016c  a112              ADR      r1,|L1.440|
00016e  e9cd1000          STRD     r1,r0,[sp,#0]
000172  f2401201          MOV      r2,#0x101
000176  68e1              LDR      r1,[r4,#0xc]
000178  4291              CMP      r1,r2
00017a  d101              BNE      |L1.384|
00017c  2101              MOVS     r1,#1
00017e  e000              B        |L1.386|
                  |L1.384|
000180  2100              MOVS     r1,#0
                  |L1.386|
000182  4608              MOV      r0,r1
000184  a30d              ADR      r3,|L1.444|
000186  a252              ADR      r2,|L1.720|
000188  2141              MOVS     r1,#0x41
00018a  f7fffffe          BL       CU_assertImplementation
;;;66     	CU_ASSERT(tmp_timer->timeout_cb == NULL);
00018e  2000              MOVS     r0,#0
000190  a109              ADR      r1,|L1.440|
000192  e9cd1000          STRD     r1,r0,[sp,#0]
000196  6921              LDR      r1,[r4,#0x10]
000198  b909              CBNZ     r1,|L1.414|
00019a  2101              MOVS     r1,#1
00019c  e000              B        |L1.416|
                  |L1.414|
00019e  2100              MOVS     r1,#0
                  |L1.416|
0001a0  4608              MOV      r0,r1
0001a2  a306              ADR      r3,|L1.444|
0001a4  a22d              ADR      r2,|L1.604|
0001a6  2142              MOVS     r1,#0x42
0001a8  f7fffffe          BL       CU_assertImplementation
;;;67     }
0001ac  b00f              ADD      sp,sp,#0x3c
0001ae  bd30              POP      {r4,r5,pc}
;;;68     
                          ENDP

                  |L1.432|
                          DCD      ||.constdata||
                  |L1.436|
                          DCD      bt_timer_cmp_by_timerid
                  |L1.440|
0001b8  00                DCB      0
0001b9  00                DCB      0
0001ba  00                DCB      0
0001bb  00                DCB      0
                  |L1.444|
0001bc  2e2e5c2e          DCB      "..\\..\\Middleware\\blue_angel\\platform\\test\\bt_test"
0001c0  2e5c4d69
0001c4  64646c65
0001c8  77617265
0001cc  5c626c75
0001d0  655f616e
0001d4  67656c5c
0001d8  706c6174
0001dc  666f726d
0001e0  5c746573
0001e4  745c6274
0001e8  5f746573
0001ec  74      
0001ed  2e6300            DCB      ".c",0
                  |L1.496|
0001f0  746d705f          DCB      "tmp_timer == &timer",0
0001f4  74696d65
0001f8  72203d3d
0001fc  20267469
000200  6d657200
                  |L1.516|
000204  746d705f          DCB      "tmp_timer->timer_id == 0xFFFF",0
000208  74696d65
00020c  722d3e74
000210  696d6572
000214  5f696420
000218  3d3d2030
00021c  78464646
000220  4600    
000222  00                DCB      0
000223  00                DCB      0
                  |L1.548|
000224  746d705f          DCB      "tmp_timer->data == 0x1234",0
000228  74696d65
00022c  722d3e64
000230  61746120
000234  3d3d2030
000238  78313233
00023c  3400    
00023e  00                DCB      0
00023f  00                DCB      0
                  |L1.576|
000240  746d705f          DCB      "tmp_timer->time_ms == 0x100",0
000244  74696d65
000248  722d3e74
00024c  696d655f
000250  6d73203d
000254  3d203078
000258  31303000
                  |L1.604|
00025c  746d705f          DCB      "tmp_timer->timeout_cb == NULL",0
000260  74696d65
000264  722d3e74
000268  696d656f
00026c  75745f63
000270  62203d3d
000274  204e554c
000278  4c00    
00027a  00                DCB      0
00027b  00                DCB      0
                  |L1.636|
00027c  746d705f          DCB      "tmp_timer == &timer1",0
000280  74696d65
000284  72203d3d
000288  20267469
00028c  6d657231
000290  00      
000291  00                DCB      0
000292  00                DCB      0
000293  00                DCB      0
                  |L1.660|
000294  746d705f          DCB      "tmp_timer->timer_id == 0xFFFE",0
000298  74696d65
00029c  722d3e74
0002a0  696d6572
0002a4  5f696420
0002a8  3d3d2030
0002ac  78464646
0002b0  4500    
0002b2  00                DCB      0
0002b3  00                DCB      0
                  |L1.692|
0002b4  746d705f          DCB      "tmp_timer->data == 0x1233",0
0002b8  74696d65
0002bc  722d3e64
0002c0  61746120
0002c4  3d3d2030
0002c8  78313233
0002cc  3300    
0002ce  00                DCB      0
0002cf  00                DCB      0
                  |L1.720|
0002d0  746d705f          DCB      "tmp_timer->time_ms == 0x101",0
0002d4  74696d65
0002d8  722d3e74
0002dc  696d655f
0002e0  6d73203d
0002e4  3d203078
0002e8  31303100

                          AREA ||i.bt_memory_test||, CODE, READONLY, ALIGN=2

                  bt_memory_test PROC
;;;68     
;;;69     void bt_memory_test(void) 
000000  b57c              PUSH     {r2-r6,lr}
;;;70     { 
;;;71     	bt_timer_t *timer;
;;;72     	uint8_t *tx_buf, *rx_buf;
;;;73     	bt_fixed_memory_init(BT_FIXED_MM_TIMER, bt_timer_fixed_memory, sizeof(bt_timer_fixed_memory));
000002  228c              MOVS     r2,#0x8c
000004  4953              LDR      r1,|L2.340|
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       bt_fixed_memory_init
;;;74     	timer = (bt_timer_t *)bt_fixed_memory_allocate(BT_FIXED_MM_TIMER); 
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       bt_fixed_memory_allocate
000012  4604              MOV      r4,r0
;;;75     	CU_ASSERT(timer != NULL);
000014  2000              MOVS     r0,#0
000016  a150              ADR      r1,|L2.344|
000018  e9cd1000          STRD     r1,r0,[sp,#0]
00001c  b10c              CBZ      r4,|L2.34|
00001e  2101              MOVS     r1,#1
000020  e000              B        |L2.36|
                  |L2.34|
000022  2100              MOVS     r1,#0
                  |L2.36|
000024  4608              MOV      r0,r1
000026  a34d              ADR      r3,|L2.348|
000028  a259              ADR      r2,|L2.400|
00002a  214b              MOVS     r1,#0x4b
00002c  f7fffffe          BL       CU_assertImplementation
;;;76     	bt_fixed_memory_free(BT_FIXED_MM_TIMER, (uint8_t *)timer);
000030  4621              MOV      r1,r4
000032  2000              MOVS     r0,#0
000034  f7fffffe          BL       bt_fixed_memory_free
;;;77     	
;;;78     	timer = (bt_timer_t *)bt_fixed_memory_allocate(BT_FIXED_MM_TIMER); 
000038  2000              MOVS     r0,#0
00003a  f7fffffe          BL       bt_fixed_memory_allocate
00003e  4604              MOV      r4,r0
;;;79     	CU_ASSERT(timer != NULL);
000040  2000              MOVS     r0,#0
000042  a145              ADR      r1,|L2.344|
000044  e9cd1000          STRD     r1,r0,[sp,#0]
000048  b10c              CBZ      r4,|L2.78|
00004a  2101              MOVS     r1,#1
00004c  e000              B        |L2.80|
                  |L2.78|
00004e  2100              MOVS     r1,#0
                  |L2.80|
000050  4608              MOV      r0,r1
000052  a342              ADR      r3,|L2.348|
000054  a24e              ADR      r2,|L2.400|
000056  214f              MOVS     r1,#0x4f
000058  f7fffffe          BL       CU_assertImplementation
;;;80     	bt_fixed_memory_free(BT_FIXED_MM_TIMER, (uint8_t *)timer);
00005c  4621              MOV      r1,r4
00005e  2000              MOVS     r0,#0
000060  f7fffffe          BL       bt_fixed_memory_free
;;;81     	
;;;82     	timer = (bt_timer_t *)bt_fixed_memory_allocate(BT_FIXED_MM_TIMER); 
000064  2000              MOVS     r0,#0
000066  f7fffffe          BL       bt_fixed_memory_allocate
00006a  4604              MOV      r4,r0
;;;83     	CU_ASSERT(timer != NULL);
00006c  2000              MOVS     r0,#0
00006e  a13a              ADR      r1,|L2.344|
000070  e9cd1000          STRD     r1,r0,[sp,#0]
000074  b10c              CBZ      r4,|L2.122|
000076  2101              MOVS     r1,#1
000078  e000              B        |L2.124|
                  |L2.122|
00007a  2100              MOVS     r1,#0
                  |L2.124|
00007c  4608              MOV      r0,r1
00007e  a337              ADR      r3,|L2.348|
000080  a243              ADR      r2,|L2.400|
000082  2153              MOVS     r1,#0x53
000084  f7fffffe          BL       CU_assertImplementation
;;;84     	bt_fixed_memory_free(BT_FIXED_MM_TIMER, (uint8_t *)timer);	
000088  4621              MOV      r1,r4
00008a  2000              MOVS     r0,#0
00008c  f7fffffe          BL       bt_fixed_memory_free
;;;85     
;;;86     	timer = (bt_timer_t *)bt_fixed_memory_allocate(BT_FIXED_MM_TIMER); 
000090  2000              MOVS     r0,#0
000092  f7fffffe          BL       bt_fixed_memory_allocate
000096  4604              MOV      r4,r0
;;;87     	CU_ASSERT(timer != NULL);
000098  2000              MOVS     r0,#0
00009a  a12f              ADR      r1,|L2.344|
00009c  e9cd1000          STRD     r1,r0,[sp,#0]
0000a0  b10c              CBZ      r4,|L2.166|
0000a2  2101              MOVS     r1,#1
0000a4  e000              B        |L2.168|
                  |L2.166|
0000a6  2100              MOVS     r1,#0
                  |L2.168|
0000a8  4608              MOV      r0,r1
0000aa  a32c              ADR      r3,|L2.348|
0000ac  a238              ADR      r2,|L2.400|
0000ae  2157              MOVS     r1,#0x57
0000b0  f7fffffe          BL       CU_assertImplementation
;;;88     	bt_fixed_memory_free(BT_FIXED_MM_TIMER, (uint8_t *)timer);	
0000b4  4621              MOV      r1,r4
0000b6  2000              MOVS     r0,#0
0000b8  f7fffffe          BL       bt_fixed_memory_free
;;;89     
;;;90     	timer = (bt_timer_t *)bt_fixed_memory_allocate(BT_FIXED_MM_TIMER); 
0000bc  2000              MOVS     r0,#0
0000be  f7fffffe          BL       bt_fixed_memory_allocate
0000c2  4604              MOV      r4,r0
;;;91     	CU_ASSERT(timer != NULL);
0000c4  2000              MOVS     r0,#0
0000c6  a124              ADR      r1,|L2.344|
0000c8  e9cd1000          STRD     r1,r0,[sp,#0]
0000cc  b10c              CBZ      r4,|L2.210|
0000ce  2101              MOVS     r1,#1
0000d0  e000              B        |L2.212|
                  |L2.210|
0000d2  2100              MOVS     r1,#0
                  |L2.212|
0000d4  4608              MOV      r0,r1
0000d6  a321              ADR      r3,|L2.348|
0000d8  a22d              ADR      r2,|L2.400|
0000da  215b              MOVS     r1,#0x5b
0000dc  f7fffffe          BL       CU_assertImplementation
;;;92     	bt_fixed_memory_free(BT_FIXED_MM_TIMER, (uint8_t *)timer);
0000e0  4621              MOV      r1,r4
0000e2  2000              MOVS     r0,#0
0000e4  f7fffffe          BL       bt_fixed_memory_free
;;;93     
;;;94     	timer = (bt_timer_t *)bt_fixed_memory_allocate(BT_FIXED_MM_TIMER); 
0000e8  2000              MOVS     r0,#0
0000ea  f7fffffe          BL       bt_fixed_memory_allocate
0000ee  4604              MOV      r4,r0
;;;95     	CU_ASSERT(timer != NULL);
0000f0  2000              MOVS     r0,#0
0000f2  a119              ADR      r1,|L2.344|
0000f4  e9cd1000          STRD     r1,r0,[sp,#0]
0000f8  b10c              CBZ      r4,|L2.254|
0000fa  2101              MOVS     r1,#1
0000fc  e000              B        |L2.256|
                  |L2.254|
0000fe  2100              MOVS     r1,#0
                  |L2.256|
000100  4608              MOV      r0,r1
000102  a316              ADR      r3,|L2.348|
000104  a222              ADR      r2,|L2.400|
000106  215f              MOVS     r1,#0x5f
000108  f7fffffe          BL       CU_assertImplementation
;;;96     	bt_fixed_memory_free(BT_FIXED_MM_TIMER, (uint8_t *)timer);
00010c  4621              MOV      r1,r4
00010e  2000              MOVS     r0,#0
000110  f7fffffe          BL       bt_fixed_memory_free
;;;97     	//bt_fixed_memory_free(BT_FIXED_MM_TIMER, (uint8_t *)timer);
;;;98     	
;;;99     	bt_memory_init(BT_MEMORY_TX, bt_tx_buf, sizeof(bt_tx_buf));
000114  f44f5280          MOV      r2,#0x1000
000118  4921              LDR      r1,|L2.416|
00011a  2000              MOVS     r0,#0
00011c  f7fffffe          BL       bt_memory_init
;;;100    	bt_memory_init(BT_MEMORY_RX, bt_rx_buf, sizeof(bt_rx_buf));
000120  f44f5280          MOV      r2,#0x1000
000124  491f              LDR      r1,|L2.420|
000126  2001              MOVS     r0,#1
000128  f7fffffe          BL       bt_memory_init
;;;101    	
;;;102    	tx_buf = bt_memory_allocate_packet(BT_MEMORY_TX, 8);
00012c  2108              MOVS     r1,#8
00012e  2000              MOVS     r0,#0
000130  f7fffffe          BL       bt_memory_allocate_packet
000134  4605              MOV      r5,r0
;;;103    	rx_buf = bt_memory_allocate_packet(BT_MEMORY_RX, 16);
000136  2110              MOVS     r1,#0x10
000138  2001              MOVS     r0,#1
00013a  f7fffffe          BL       bt_memory_allocate_packet
00013e  4606              MOV      r6,r0
;;;104    	bt_memory_free_packet(BT_MEMORY_TX, tx_buf);
000140  4629              MOV      r1,r5
000142  2000              MOVS     r0,#0
000144  f7fffffe          BL       bt_memory_free_packet
;;;105    	bt_memory_free_packet(BT_MEMORY_RX, rx_buf);
000148  4631              MOV      r1,r6
00014a  2001              MOVS     r0,#1
00014c  f7fffffe          BL       bt_memory_free_packet
;;;106    	//bt_memory_free_packet(BT_MEMORY_TX, tx_buf);
;;;107    	//bt_memory_free_packet(BT_MEMORY_RX, rx_buf);
;;;108    }
000150  bd7c              POP      {r2-r6,pc}
;;;109    
                          ENDP

000152  0000              DCW      0x0000
                  |L2.340|
                          DCD      bt_timer_fixed_memory
                  |L2.344|
000158  00                DCB      0
000159  00                DCB      0
00015a  00                DCB      0
00015b  00                DCB      0
                  |L2.348|
00015c  2e2e5c2e          DCB      "..\\..\\Middleware\\blue_angel\\platform\\test\\bt_test"
000160  2e5c4d69
000164  64646c65
000168  77617265
00016c  5c626c75
000170  655f616e
000174  67656c5c
000178  706c6174
00017c  666f726d
000180  5c746573
000184  745c6274
000188  5f746573
00018c  74      
00018d  2e6300            DCB      ".c",0
                  |L2.400|
000190  74696d65          DCB      "timer != NULL",0
000194  7220213d
000198  204e554c
00019c  4c00    
00019e  00                DCB      0
00019f  00                DCB      0
                  |L2.416|
                          DCD      bt_tx_buf
                  |L2.420|
                          DCD      bt_rx_buf

                          AREA ||i.bt_timer_test||, CODE, READONLY, ALIGN=2

                  bt_timer_test PROC
;;;138    
;;;139    void bt_timer_test(void) 
000000  b57c              PUSH     {r2-r6,lr}
;;;140    { 
;;;141    	uint32_t timer_id = (BT_MODULE_HCI | 0x0C03);
000002  4c23              LDR      r4,|L3.144|
;;;142    	start_tick = bt_os_layer_get_system_tick();
000004  f7fffffe          BL       bt_os_layer_get_system_tick
000008  4922              LDR      r1,|L3.148|
00000a  6008              STR      r0,[r1,#0]  ; start_tick
;;;143    	CU_ASSERT(BT_STATUS_SUCCESS == bt_timer_start(timer_id, 200, 0, timeout));
00000c  4b22              LDR      r3,|L3.152|
00000e  2200              MOVS     r2,#0
000010  21c8              MOVS     r1,#0xc8
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       bt_timer_start
000018  2801              CMP      r0,#1
00001a  d100              BNE      |L3.30|
00001c  e000              B        |L3.32|
                  |L3.30|
00001e  2000              MOVS     r0,#0
                  |L3.32|
000020  4605              MOV      r5,r0
000022  2000              MOVS     r0,#0
000024  a11d              ADR      r1,|L3.156|
000026  a31e              ADR      r3,|L3.160|
000028  a22a              ADR      r2,|L3.212|
00002a  e9cd1000          STRD     r1,r0,[sp,#0]
00002e  218f              MOVS     r1,#0x8f
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       CU_assertImplementation
;;;144    	CU_ASSERT(BT_STATUS_SUCCESS == bt_timer_start(timer_id+1, 100, 0, timeout1));
000036  4b37              LDR      r3,|L3.276|
000038  2200              MOVS     r2,#0
00003a  2164              MOVS     r1,#0x64
00003c  1c60              ADDS     r0,r4,#1
00003e  f7fffffe          BL       bt_timer_start
000042  2801              CMP      r0,#1
000044  d100              BNE      |L3.72|
000046  e000              B        |L3.74|
                  |L3.72|
000048  2000              MOVS     r0,#0
                  |L3.74|
00004a  4605              MOV      r5,r0
00004c  2000              MOVS     r0,#0
00004e  a113              ADR      r1,|L3.156|
000050  a313              ADR      r3,|L3.160|
000052  4a31              LDR      r2,|L3.280|
000054  e9cd1000          STRD     r1,r0,[sp,#0]
000058  2190              MOVS     r1,#0x90
00005a  4628              MOV      r0,r5
00005c  f7fffffe          BL       CU_assertImplementation
;;;145    	CU_ASSERT(BT_STATUS_SUCCESS == bt_timer_start(timer_id+2, 300, 0, timeout2));
000060  4b2e              LDR      r3,|L3.284|
000062  2200              MOVS     r2,#0
000064  f44f7196          MOV      r1,#0x12c
000068  1ca0              ADDS     r0,r4,#2
00006a  f7fffffe          BL       bt_timer_start
00006e  2801              CMP      r0,#1
000070  d100              BNE      |L3.116|
000072  e000              B        |L3.118|
                  |L3.116|
000074  2000              MOVS     r0,#0
                  |L3.118|
000076  4605              MOV      r5,r0
000078  2000              MOVS     r0,#0
00007a  a108              ADR      r1,|L3.156|
00007c  a308              ADR      r3,|L3.160|
00007e  4a28              LDR      r2,|L3.288|
000080  e9cd1000          STRD     r1,r0,[sp,#0]
000084  2191              MOVS     r1,#0x91
000086  4628              MOV      r0,r5
000088  f7fffffe          BL       CU_assertImplementation
;;;146    }
00008c  bd7c              POP      {r2-r6,pc}
                          ENDP

00008e  0000              DCW      0x0000
                  |L3.144|
                          DCD      0x20000c03
                  |L3.148|
                          DCD      start_tick
                  |L3.152|
                          DCD      timeout
                  |L3.156|
00009c  00                DCB      0
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0
                  |L3.160|
0000a0  2e2e5c2e          DCB      "..\\..\\Middleware\\blue_angel\\platform\\test\\bt_test"
0000a4  2e5c4d69
0000a8  64646c65
0000ac  77617265
0000b0  5c626c75
0000b4  655f616e
0000b8  67656c5c
0000bc  706c6174
0000c0  666f726d
0000c4  5c746573
0000c8  745c6274
0000cc  5f746573
0000d0  74      
0000d1  2e6300            DCB      ".c",0
                  |L3.212|
0000d4  42545f53          DCB      "BT_STATUS_SUCCESS == bt_timer_start(timer_id, 200, 0, t"
0000d8  54415455
0000dc  535f5355
0000e0  43434553
0000e4  53203d3d
0000e8  2062745f
0000ec  74696d65
0000f0  725f7374
0000f4  61727428
0000f8  74696d65
0000fc  725f6964
000100  2c203230
000104  302c2030
000108  2c2074  
00010b  696d656f          DCB      "imeout)",0
00010f  75742900
000113  00                DCB      0
                  |L3.276|
                          DCD      timeout1
                  |L3.280|
                          DCD      ||.conststring||
                  |L3.284|
                          DCD      timeout2
                  |L3.288|
                          DCD      ||.conststring||+0x44

                          AREA ||i.timeout||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  timeout PROC
;;;111    //typedef bt_status_t (*bt_timer_timeout_callback_t)(bool is_timeout, uint32_t timer_id, uint32_t data, const void *param);
;;;112    bt_status_t timeout(bool is_timeout, uint32_t timer_id, uint32_t data, const void *param)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;113    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;114    	CU_ASSERT(is_timeout);
00000c  2000              MOVS     r0,#0
00000e  a114              ADR      r1,|L4.96|
000010  a314              ADR      r3,|L4.100|
000012  a221              ADR      r2,|L4.152|
000014  e9cd1000          STRD     r1,r0,[sp,#0]
000018  2172              MOVS     r1,#0x72
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       CU_assertImplementation
;;;115    	CU_ASSERT(timer_id == (BT_MODULE_HCI | 0x0C03));
000020  2000              MOVS     r0,#0
000022  a10f              ADR      r1,|L4.96|
000024  e9cd1000          STRD     r1,r0,[sp,#0]
000028  491e              LDR      r1,|L4.164|
00002a  428c              CMP      r4,r1
00002c  d101              BNE      |L4.50|
00002e  2101              MOVS     r1,#1
000030  e000              B        |L4.52|
                  |L4.50|
000032  2100              MOVS     r1,#0
                  |L4.52|
000034  4608              MOV      r0,r1
000036  a30b              ADR      r3,|L4.100|
000038  a21b              ADR      r2,|L4.168|
00003a  2173              MOVS     r1,#0x73
00003c  f7fffffe          BL       CU_assertImplementation
;;;116    	end_tick = bt_os_layer_get_system_tick();
000040  f7fffffe          BL       bt_os_layer_get_system_tick
000044  4922              LDR      r1,|L4.208|
000046  6008              STR      r0,[r1,#0]  ; end_tick
;;;117    	printf("time_length = %d", end_tick-start_tick);
000048  4608              MOV      r0,r1
00004a  6800              LDR      r0,[r0,#0]  ; end_tick
00004c  4a21              LDR      r2,|L4.212|
00004e  6812              LDR      r2,[r2,#0]  ; start_tick
000050  1a81              SUBS     r1,r0,r2
000052  a021              ADR      r0,|L4.216|
000054  f7fffffe          BL       __2printf
;;;118    	return BT_STATUS_SUCCESS;
000058  2001              MOVS     r0,#1
;;;119    }
00005a  e8bd81fc          POP      {r2-r8,pc}
;;;120    
                          ENDP

00005e  0000              DCW      0x0000
                  |L4.96|
000060  00                DCB      0
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0
                  |L4.100|
000064  2e2e5c2e          DCB      "..\\..\\Middleware\\blue_angel\\platform\\test\\bt_test"
000068  2e5c4d69
00006c  64646c65
000070  77617265
000074  5c626c75
000078  655f616e
00007c  67656c5c
000080  706c6174
000084  666f726d
000088  5c746573
00008c  745c6274
000090  5f746573
000094  74      
000095  2e6300            DCB      ".c",0
                  |L4.152|
000098  69735f74          DCB      "is_timeout",0
00009c  696d656f
0000a0  757400  
0000a3  00                DCB      0
                  |L4.164|
                          DCD      0x20000c03
                  |L4.168|
0000a8  74696d65          DCB      "timer_id == (BT_MODULE_HCI | 0x0C03)",0
0000ac  725f6964
0000b0  203d3d20
0000b4  2842545f
0000b8  4d4f4455
0000bc  4c455f48
0000c0  4349207c
0000c4  20307830
0000c8  43303329
0000cc  00      
0000cd  00                DCB      0
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L4.208|
                          DCD      end_tick
                  |L4.212|
                          DCD      start_tick
                  |L4.216|
0000d8  74696d65          DCB      "time_length = %d",0
0000dc  5f6c656e
0000e0  67746820
0000e4  3d202564
0000e8  00      
0000e9  00                DCB      0
0000ea  00                DCB      0
0000eb  00                DCB      0

                          AREA ||i.timeout1||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  timeout1 PROC
;;;120    
;;;121    bt_status_t timeout1(bool is_timeout, uint32_t timer_id, uint32_t data, const void *param)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;122    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;123    	CU_ASSERT(is_timeout);
00000c  2000              MOVS     r0,#0
00000e  a114              ADR      r1,|L5.96|
000010  a314              ADR      r3,|L5.100|
000012  a221              ADR      r2,|L5.152|
000014  e9cd1000          STRD     r1,r0,[sp,#0]
000018  217b              MOVS     r1,#0x7b
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       CU_assertImplementation
;;;124    	CU_ASSERT(timer_id == ((BT_MODULE_HCI | 0x0C03) + 1));
000020  2000              MOVS     r0,#0
000022  a10f              ADR      r1,|L5.96|
000024  e9cd1000          STRD     r1,r0,[sp,#0]
000028  491e              LDR      r1,|L5.164|
00002a  428c              CMP      r4,r1
00002c  d101              BNE      |L5.50|
00002e  2101              MOVS     r1,#1
000030  e000              B        |L5.52|
                  |L5.50|
000032  2100              MOVS     r1,#0
                  |L5.52|
000034  4608              MOV      r0,r1
000036  a30b              ADR      r3,|L5.100|
000038  a21b              ADR      r2,|L5.168|
00003a  217c              MOVS     r1,#0x7c
00003c  f7fffffe          BL       CU_assertImplementation
;;;125    	end_tick = bt_os_layer_get_system_tick();
000040  f7fffffe          BL       bt_os_layer_get_system_tick
000044  4923              LDR      r1,|L5.212|
000046  6008              STR      r0,[r1,#0]  ; end_tick
;;;126    	printf("time_length1 = %d", end_tick-start_tick);
000048  4608              MOV      r0,r1
00004a  6800              LDR      r0,[r0,#0]  ; end_tick
00004c  4a22              LDR      r2,|L5.216|
00004e  6812              LDR      r2,[r2,#0]  ; start_tick
000050  1a81              SUBS     r1,r0,r2
000052  a022              ADR      r0,|L5.220|
000054  f7fffffe          BL       __2printf
;;;127    	return BT_STATUS_SUCCESS;
000058  2001              MOVS     r0,#1
;;;128    }
00005a  e8bd81fc          POP      {r2-r8,pc}
;;;129    
                          ENDP

00005e  0000              DCW      0x0000
                  |L5.96|
000060  00                DCB      0
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0
                  |L5.100|
000064  2e2e5c2e          DCB      "..\\..\\Middleware\\blue_angel\\platform\\test\\bt_test"
000068  2e5c4d69
00006c  64646c65
000070  77617265
000074  5c626c75
000078  655f616e
00007c  67656c5c
000080  706c6174
000084  666f726d
000088  5c746573
00008c  745c6274
000090  5f746573
000094  74      
000095  2e6300            DCB      ".c",0
                  |L5.152|
000098  69735f74          DCB      "is_timeout",0
00009c  696d656f
0000a0  757400  
0000a3  00                DCB      0
                  |L5.164|
                          DCD      0x20000c04
                  |L5.168|
0000a8  74696d65          DCB      "timer_id == ((BT_MODULE_HCI | 0x0C03) + 1)",0
0000ac  725f6964
0000b0  203d3d20
0000b4  28284254
0000b8  5f4d4f44
0000bc  554c455f
0000c0  48434920
0000c4  7c203078
0000c8  30433033
0000cc  29202b20
0000d0  312900  
0000d3  00                DCB      0
                  |L5.212|
                          DCD      end_tick
                  |L5.216|
                          DCD      start_tick
                  |L5.220|
0000dc  74696d65          DCB      "time_length1 = %d",0
0000e0  5f6c656e
0000e4  67746831
0000e8  203d2025
0000ec  6400    
0000ee  00                DCB      0
0000ef  00                DCB      0

                          AREA ||i.timeout2||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  timeout2 PROC
;;;129    
;;;130    bt_status_t timeout2(bool is_timeout, uint32_t timer_id, uint32_t data, const void *param)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;131    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;132    	CU_ASSERT(is_timeout);
00000c  2000              MOVS     r0,#0
00000e  a114              ADR      r1,|L6.96|
000010  a314              ADR      r3,|L6.100|
000012  a221              ADR      r2,|L6.152|
000014  e9cd1000          STRD     r1,r0,[sp,#0]
000018  2184              MOVS     r1,#0x84
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       CU_assertImplementation
;;;133    	CU_ASSERT(timer_id == ((BT_MODULE_HCI | 0x0C03) + 2));
000020  2000              MOVS     r0,#0
000022  a10f              ADR      r1,|L6.96|
000024  e9cd1000          STRD     r1,r0,[sp,#0]
000028  491e              LDR      r1,|L6.164|
00002a  428c              CMP      r4,r1
00002c  d101              BNE      |L6.50|
00002e  2101              MOVS     r1,#1
000030  e000              B        |L6.52|
                  |L6.50|
000032  2100              MOVS     r1,#0
                  |L6.52|
000034  4608              MOV      r0,r1
000036  a30b              ADR      r3,|L6.100|
000038  a21b              ADR      r2,|L6.168|
00003a  2185              MOVS     r1,#0x85
00003c  f7fffffe          BL       CU_assertImplementation
;;;134    	end_tick = bt_os_layer_get_system_tick();
000040  f7fffffe          BL       bt_os_layer_get_system_tick
000044  4923              LDR      r1,|L6.212|
000046  6008              STR      r0,[r1,#0]  ; end_tick
;;;135    	printf("time_length2 = %d", end_tick-start_tick);
000048  4608              MOV      r0,r1
00004a  6800              LDR      r0,[r0,#0]  ; end_tick
00004c  4a22              LDR      r2,|L6.216|
00004e  6812              LDR      r2,[r2,#0]  ; start_tick
000050  1a81              SUBS     r1,r0,r2
000052  a022              ADR      r0,|L6.220|
000054  f7fffffe          BL       __2printf
;;;136    	return BT_STATUS_SUCCESS;
000058  2001              MOVS     r0,#1
;;;137    }
00005a  e8bd81fc          POP      {r2-r8,pc}
;;;138    
                          ENDP

00005e  0000              DCW      0x0000
                  |L6.96|
000060  00                DCB      0
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0
                  |L6.100|
000064  2e2e5c2e          DCB      "..\\..\\Middleware\\blue_angel\\platform\\test\\bt_test"
000068  2e5c4d69
00006c  64646c65
000070  77617265
000074  5c626c75
000078  655f616e
00007c  67656c5c
000080  706c6174
000084  666f726d
000088  5c746573
00008c  745c6274
000090  5f746573
000094  74      
000095  2e6300            DCB      ".c",0
                  |L6.152|
000098  69735f74          DCB      "is_timeout",0
00009c  696d656f
0000a0  757400  
0000a3  00                DCB      0
                  |L6.164|
                          DCD      0x20000c05
                  |L6.168|
0000a8  74696d65          DCB      "timer_id == ((BT_MODULE_HCI | 0x0C03) + 2)",0
0000ac  725f6964
0000b0  203d3d20
0000b4  28284254
0000b8  5f4d4f44
0000bc  554c455f
0000c0  48434920
0000c4  7c203078
0000c8  30433033
0000cc  29202b20
0000d0  322900  
0000d3  00                DCB      0
                  |L6.212|
                          DCD      end_tick
                  |L6.216|
                          DCD      start_tick
                  |L6.220|
0000dc  74696d65          DCB      "time_length2 = %d",0
0000e0  5f6c656e
0000e4  67746832
0000e8  203d2025
0000ec  6400    
0000ee  00                DCB      0
0000ef  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  bt_timer_fixed_memory
                          %        140
                  bt_tx_buf
                          %        4096
                  bt_rx_buf
                          %        4096

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00000000
                          DCD      0x0000ffff
                          DCD      0x00001234
                          DCD      0x00000100
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x0000fffe
                          DCD      0x00001233
                          DCD      0x00000101
                          DCD      0x00000000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  42545f53          DCB      "BT_STATUS_SUCCESS == bt_timer_start(timer_id+1, 100, 0,"
000004  54415455
000008  535f5355
00000c  43434553
000010  53203d3d
000014  2062745f
000018  74696d65
00001c  725f7374
000020  61727428
000024  74696d65
000028  725f6964
00002c  2b312c20
000030  3130302c
000034  20302c  
000037  2074696d          DCB      " timeout1)",0
00003b  656f7574
00003f  312900  
000042  00                DCB      0
000043  00                DCB      0
000044  42545f53          DCB      "BT_STATUS_SUCCESS == bt_timer_start(timer_id+2, 300, 0,"
000048  54415455
00004c  535f5355
000050  43434553
000054  53203d3d
000058  2062745f
00005c  74696d65
000060  725f7374
000064  61727428
000068  74696d65
00006c  725f6964
000070  2b322c20
000074  3330302c
000078  20302c  
00007b  2074696d          DCB      " timeout2)",0
00007f  656f7574
000083  322900  

                          AREA ||.data||, DATA, ALIGN=2

                  start_tick
                          DCD      0x00000000
                  end_tick
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Middleware\\blue_angel\\platform\\test\\bt_test.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_bt_test_c_5c20b3a4____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_bt_test_c_5c20b3a4____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_bt_test_c_5c20b3a4____REVSH|
#line 128
|__asm___9_bt_test_c_5c20b3a4____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
