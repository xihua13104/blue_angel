; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bt_timer.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bt_timer.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\Middleware\blue_angel\inc -I..\..\Middleware\bt_callback_manager -I..\..\Middleware\blue_angel\btif -I..\..\Middleware\blue_angel\common -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\src\common -I..\..\Middleware\blue_angel\src\inc -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\platform\rtos -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\ut_manager\Cunit\Headers -I..\..\Middleware\ut_manager\Cunit\interface -I..\..\Middleware\blue_angel\platform\test -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=522 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DNDEBUG --omf_browse=.\flash\obj\bt_timer.crf ..\..\Middleware\blue_angel\src\common\bt_timer.c]
                          THUMB

                          AREA ||i.bt_timer_cancel||, CODE, READONLY, ALIGN=2

                  bt_timer_cancel PROC
;;;85     
;;;86     bt_status_t bt_timer_cancel(uint32_t timer_id)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;87     {
000004  4605              MOV      r5,r0
;;;88     	bt_timer_t *timer = NULL;
000006  2700              MOVS     r7,#0
;;;89     	uint32_t current_tick = 0;
000008  46b8              MOV      r8,r7
;;;90     	int32_t diff = 0;
00000a  2600              MOVS     r6,#0
;;;91     	bt_linknode_t *pre = bt_linknode_travel_node(&bt_timer_list, bt_timer_cmp_by_timerid, (const void *)timer_id);
00000c  462a              MOV      r2,r5
00000e  4915              LDR      r1,|L1.100|
000010  4815              LDR      r0,|L1.104|
000012  f7fffffe          BL       bt_linknode_travel_node
000016  4604              MOV      r4,r0
;;;92     	if (pre == NULL) {
000018  b914              CBNZ     r4,|L1.32|
;;;93     		return BT_STATUS_TIMER_NOT_FOUND;
00001a  4814              LDR      r0,|L1.108|
                  |L1.28|
;;;94     	}
;;;95     	timer = (bt_timer_t *)bt_linknode_delete_node(pre, BT_NODE_FRONT);
;;;96     	/*删除的是第一个timer node*/
;;;97     	if (pre == &bt_timer_list) {
;;;98     		bt_timer_stop_timer();
;;;99     		if (bt_timer_list.next) {
;;;100    			current_tick = bt_timer_get_current_tick();
;;;101    			diff = ((bt_timer_t *)(bt_timer_list.next))->time_ms - current_tick;
;;;102    			if (diff < 0) {
;;;103    				diff = 0;
;;;104    			}
;;;105    			bt_timer_start_timer(diff);
;;;106    		}
;;;107    	}
;;;108    	bt_fixed_memory_free(BT_FIXED_MM_TIMER, (uint8_t *)timer);
;;;109    	
;;;110    	return BT_STATUS_SUCCESS;
;;;111    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.32|
000020  2101              MOVS     r1,#1                 ;95
000022  4620              MOV      r0,r4                 ;95
000024  f7fffffe          BL       bt_linknode_delete_node
000028  4607              MOV      r7,r0                 ;95
00002a  480f              LDR      r0,|L1.104|
00002c  4284              CMP      r4,r0                 ;97
00002e  d112              BNE      |L1.86|
000030  f7fffffe          BL       bt_timer_stop_timer
000034  480c              LDR      r0,|L1.104|
000036  6800              LDR      r0,[r0,#0]            ;99  ; bt_timer_list
000038  b168              CBZ      r0,|L1.86|
00003a  f7fffffe          BL       bt_timer_get_current_tick
00003e  4680              MOV      r8,r0                 ;100
000040  4809              LDR      r0,|L1.104|
000042  6800              LDR      r0,[r0,#0]            ;101  ; bt_timer_list
000044  68c0              LDR      r0,[r0,#0xc]          ;101
000046  eba00608          SUB      r6,r0,r8              ;101
00004a  2e00              CMP      r6,#0                 ;102
00004c  da00              BGE      |L1.80|
00004e  2600              MOVS     r6,#0                 ;103
                  |L1.80|
000050  4630              MOV      r0,r6                 ;105
000052  f7fffffe          BL       bt_timer_start_timer
                  |L1.86|
000056  4639              MOV      r1,r7                 ;108
000058  2000              MOVS     r0,#0                 ;108
00005a  f7fffffe          BL       bt_fixed_memory_free
00005e  2001              MOVS     r0,#1                 ;110
000060  e7dc              B        |L1.28|
;;;112    
                          ENDP

000062  0000              DCW      0x0000
                  |L1.100|
                          DCD      bt_timer_cmp_by_timerid
                  |L1.104|
                          DCD      bt_timer_list
                  |L1.108|
                          DCD      0x10000001

                          AREA ||i.bt_timer_cancel_and_callback||, CODE, READONLY, ALIGN=2

                  bt_timer_cancel_and_callback PROC
;;;122    
;;;123    bt_status_t bt_timer_cancel_and_callback(uint32_t timer_id, const void *param)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;124    {
000004  b086              SUB      sp,sp,#0x18
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
;;;125    	bt_status_t status = BT_STATUS_SUCCESS;
00000a  2701              MOVS     r7,#1
;;;126    	bt_timer_t tmp = {0};
00000c  2114              MOVS     r1,#0x14
00000e  a801              ADD      r0,sp,#4
000010  f7fffffe          BL       __aeabi_memclr4
;;;127    	bt_timer_t *timer = NULL;
000014  f04f0800          MOV      r8,#0
;;;128    	bt_linknode_t *pre = bt_linknode_travel_node(&bt_timer_list, bt_timer_cmp_by_timerid, (const void *)timer_id);
000018  4622              MOV      r2,r4
00001a  4910              LDR      r1,|L2.92|
00001c  4810              LDR      r0,|L2.96|
00001e  f7fffffe          BL       bt_linknode_travel_node
000022  4606              MOV      r6,r0
;;;129    	if (pre == NULL) {
000024  b91e              CBNZ     r6,|L2.46|
;;;130    		return BT_STATUS_TIMER_NOT_FOUND;
000026  480f              LDR      r0,|L2.100|
                  |L2.40|
;;;131    	}
;;;132    	timer = (bt_timer_t *)(pre->next);
;;;133    	bt_memcpy(&tmp, timer, sizeof(bt_timer_t));
;;;134    	bt_timer_cancel(timer_id);
;;;135    	if (tmp.timeout_cb) {
;;;136    		status = tmp.timeout_cb(false, timer_id, tmp.data, param);
;;;137    	}
;;;138    	return status;
;;;139    }
000028  b006              ADD      sp,sp,#0x18
00002a  e8bd81f0          POP      {r4-r8,pc}
                  |L2.46|
00002e  f8d68000          LDR      r8,[r6,#0]            ;132
000032  2214              MOVS     r2,#0x14              ;133
000034  4641              MOV      r1,r8                 ;133
000036  a801              ADD      r0,sp,#4              ;133
000038  f7fffffe          BL       bt_memcpy
00003c  4620              MOV      r0,r4                 ;134
00003e  f7fffffe          BL       bt_timer_cancel
000042  9805              LDR      r0,[sp,#0x14]         ;135
000044  b138              CBZ      r0,|L2.86|
000046  462b              MOV      r3,r5                 ;136
000048  4621              MOV      r1,r4                 ;136
00004a  2000              MOVS     r0,#0                 ;136
00004c  f8ddc014          LDR      r12,[sp,#0x14]        ;136
000050  9a03              LDR      r2,[sp,#0xc]          ;136
000052  47e0              BLX      r12                   ;136
000054  4607              MOV      r7,r0                 ;136
                  |L2.86|
000056  4638              MOV      r0,r7                 ;138
000058  e7e6              B        |L2.40|
;;;140    
                          ENDP

00005a  0000              DCW      0x0000
                  |L2.92|
                          DCD      bt_timer_cmp_by_timerid
                  |L2.96|
                          DCD      bt_timer_list
                  |L2.100|
                          DCD      0x10000001

                          AREA ||i.bt_timer_check_timeout_handler||, CODE, READONLY, ALIGN=2

                  bt_timer_check_timeout_handler PROC
;;;151    
;;;152    void bt_timer_check_timeout_handler()
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;153    {
000004  b086              SUB      sp,sp,#0x18
;;;154    	bt_timer_t *timer = NULL;
000006  2700              MOVS     r7,#0
;;;155    	uint32_t current_tick = 0;
000008  2500              MOVS     r5,#0
;;;156    	int32_t diff = 0;
00000a  2600              MOVS     r6,#0
;;;157    	bt_linknode_t expired_node_header = {NULL};
00000c  2000              MOVS     r0,#0
00000e  9005              STR      r0,[sp,#0x14]
;;;158    	bt_linknode_t *tmp = NULL;
000010  2400              MOVS     r4,#0
;;;159    	bt_linknode_t *pre = NULL;
000012  4680              MOV      r8,r0
;;;160    	bt_timer_t local_timer_buf = {0};
000014  2114              MOVS     r1,#0x14
000016  4668              MOV      r0,sp
000018  f7fffffe          BL       __aeabi_memclr4
;;;161    
;;;162    	tmp = bt_timer_list.next;
00001c  4826              LDR      r0,|L3.184|
00001e  6804              LDR      r4,[r0,#0]  ; bt_timer_list
;;;163    	while (tmp != NULL) {
000020  e009              B        |L3.54|
                  |L3.34|
;;;164    		timer = (bt_timer_t *)tmp;
000022  4627              MOV      r7,r4
;;;165    		if (timer->time_ms <= current_tick) {
000024  68f8              LDR      r0,[r7,#0xc]
000026  42a8              CMP      r0,r5
000028  d804              BHI      |L3.52|
;;;166    			bt_linknode_insert_node(&expired_node_header, tmp, BT_NODE_TAIL);
00002a  2202              MOVS     r2,#2
00002c  4621              MOV      r1,r4
00002e  a805              ADD      r0,sp,#0x14
000030  f7fffffe          BL       bt_linknode_insert_node
                  |L3.52|
;;;167    		}
;;;168    		tmp = tmp->next;
000034  6824              LDR      r4,[r4,#0]
                  |L3.54|
000036  2c00              CMP      r4,#0                 ;163
000038  d1f3              BNE      |L3.34|
;;;169    	}
;;;170    	/*没有timer到期*/
;;;171    	if (expired_node_header.next == NULL) {
00003a  9805              LDR      r0,[sp,#0x14]
00003c  b910              CBNZ     r0,|L3.68|
                  |L3.62|
;;;172    		return;
;;;173    	}
;;;174    
;;;175    	tmp = expired_node_header.next;
;;;176    	/*到期的是第一个timer，则需要更新timer*/
;;;177    	if (tmp == bt_timer_list.next) {
;;;178    		bt_timer_stop_timer();
;;;179    		if (bt_timer_list.next) {
;;;180    			current_tick = bt_timer_get_current_tick();
;;;181    			diff = ((bt_timer_t *)(bt_timer_list.next))->time_ms - current_tick;
;;;182    			if (diff < 0) {
;;;183    				diff = 0;
;;;184    			}
;;;185    			bt_timer_start_timer(diff);
;;;186    		}
;;;187    	}
;;;188    	while (tmp != NULL) {
;;;189    		/*到期的是第一个timer，则需要更新timer*/
;;;190    		/*if (tmp == bt_timer_list.next) {
;;;191    			bt_timer_stop_timer();
;;;192    			pre = bt_linknode_travel_node(&bt_timer_list, bt_linknode_cmp_backward, (const void *) tmp);
;;;193    			bt_linknode_delete_node(pre, BT_NODE_FRONT);
;;;194    			if (bt_timer_list.next) {
;;;195    				current_tick = bt_timer_get_current_tick();
;;;196    				diff = ((bt_timer_t *)(bt_timer_list.next))->time_ms - current_tick;
;;;197    				if (diff < 0) {
;;;198    					diff = 0;
;;;199    				}
;;;200    				bt_timer_start_timer(diff);
;;;201    			}
;;;202    		}*/
;;;203    		pre = bt_linknode_travel_node(&bt_timer_list, bt_linknode_cmp_backward, (const void *) tmp);
;;;204    		bt_linknode_delete_node(pre, BT_NODE_FRONT);
;;;205    		bt_memcpy(&local_timer_buf, (bt_timer_t *)tmp, sizeof(bt_timer_t));
;;;206    		if (local_timer_buf.timeout_cb) {
;;;207    			local_timer_buf.timeout_cb(true, local_timer_buf.timer_id, local_timer_buf.data, NULL);
;;;208    		}
;;;209    		bt_fixed_memory_free(BT_FIXED_MM_TIMER, (uint8_t *)tmp);
;;;210    		tmp = tmp->next;
;;;211    	}
;;;212    }
00003e  b006              ADD      sp,sp,#0x18
000040  e8bd81f0          POP      {r4-r8,pc}
                  |L3.68|
000044  9c05              LDR      r4,[sp,#0x14]         ;175
000046  481c              LDR      r0,|L3.184|
000048  6800              LDR      r0,[r0,#0]            ;177  ; bt_timer_list
00004a  42a0              CMP      r0,r4                 ;177
00004c  d111              BNE      |L3.114|
00004e  f7fffffe          BL       bt_timer_stop_timer
000052  4819              LDR      r0,|L3.184|
000054  6800              LDR      r0,[r0,#0]            ;179  ; bt_timer_list
000056  b160              CBZ      r0,|L3.114|
000058  f7fffffe          BL       bt_timer_get_current_tick
00005c  4605              MOV      r5,r0                 ;180
00005e  4816              LDR      r0,|L3.184|
000060  6800              LDR      r0,[r0,#0]            ;181  ; bt_timer_list
000062  68c0              LDR      r0,[r0,#0xc]          ;181
000064  1b46              SUBS     r6,r0,r5              ;181
000066  2e00              CMP      r6,#0                 ;182
000068  da00              BGE      |L3.108|
00006a  2600              MOVS     r6,#0                 ;183
                  |L3.108|
00006c  4630              MOV      r0,r6                 ;185
00006e  f7fffffe          BL       bt_timer_start_timer
                  |L3.114|
000072  e01c              B        |L3.174|
                  |L3.116|
000074  4622              MOV      r2,r4                 ;203
000076  4911              LDR      r1,|L3.188|
000078  480f              LDR      r0,|L3.184|
00007a  f7fffffe          BL       bt_linknode_travel_node
00007e  4680              MOV      r8,r0                 ;203
000080  2101              MOVS     r1,#1                 ;204
000082  4640              MOV      r0,r8                 ;204
000084  f7fffffe          BL       bt_linknode_delete_node
000088  2214              MOVS     r2,#0x14              ;205
00008a  4621              MOV      r1,r4                 ;205
00008c  4668              MOV      r0,sp                 ;205
00008e  f7fffffe          BL       bt_memcpy
000092  9804              LDR      r0,[sp,#0x10]         ;206
000094  b130              CBZ      r0,|L3.164|
000096  2300              MOVS     r3,#0                 ;207
000098  2001              MOVS     r0,#1                 ;207
00009a  f8ddc010          LDR      r12,[sp,#0x10]        ;207
00009e  e9dd1201          LDRD     r1,r2,[sp,#4]         ;207
0000a2  47e0              BLX      r12                   ;207
                  |L3.164|
0000a4  4621              MOV      r1,r4                 ;209
0000a6  2000              MOVS     r0,#0                 ;209
0000a8  f7fffffe          BL       bt_fixed_memory_free
0000ac  6824              LDR      r4,[r4,#0]            ;210
                  |L3.174|
0000ae  2c00              CMP      r4,#0                 ;188
0000b0  d1e0              BNE      |L3.116|
0000b2  bf00              NOP      
0000b4  e7c3              B        |L3.62|
;;;213    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L3.184|
                          DCD      bt_timer_list
                  |L3.188|
                          DCD      bt_linknode_cmp_backward

                          AREA ||i.bt_timer_cmp_by_timer_duration||, CODE, READONLY, ALIGN=2

                  bt_timer_cmp_by_timer_duration PROC
;;;32     
;;;33     bool bt_timer_cmp_by_timer_duration(const bt_linknode_t *node, const void *data)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;34     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;35     	bt_timer_duration_t *duration = NULL;
000008  2600              MOVS     r6,#0
;;;36     	bt_timer_t *timer = NULL;
00000a  2700              MOVS     r7,#0
;;;37     	int32_t is_timeout = 0;
00000c  46b0              MOV      r8,r6
;;;38     	int32_t diff = 0;
00000e  46b1              MOV      r9,r6
;;;39     	BT_ASSERT(node && data);
000010  b10c              CBZ      r4,|L4.22|
000012  b105              CBZ      r5,|L4.22|
000014  e003              B        |L4.30|
                  |L4.22|
000016  2127              MOVS     r1,#0x27
000018  a00e              ADR      r0,|L4.84|
00001a  f7fffffe          BL       assert_failed
                  |L4.30|
;;;40     
;;;41     	duration = (bt_timer_duration_t *)data;
00001e  462e              MOV      r6,r5
;;;42     	timer = (bt_timer_t *)(node->next);
000020  6827              LDR      r7,[r4,#0]
;;;43     	if (timer == NULL) {
000022  b917              CBNZ     r7,|L4.42|
;;;44     		return false;
000024  2000              MOVS     r0,#0
                  |L4.38|
;;;45     	}
;;;46     
;;;47     	is_timeout = timer->time_ms - duration->current_tick;
;;;48     	diff = timer->time_ms - duration->current_tick - duration->duration;
;;;49     	return ((is_timeout > 0) && (diff > 0));
;;;50     }
000026  e8bd87f0          POP      {r4-r10,pc}
                  |L4.42|
00002a  68f8              LDR      r0,[r7,#0xc]          ;47
00002c  6831              LDR      r1,[r6,#0]            ;47
00002e  eba00801          SUB      r8,r0,r1              ;47
000032  68f8              LDR      r0,[r7,#0xc]          ;48
000034  6831              LDR      r1,[r6,#0]            ;48
000036  1a40              SUBS     r0,r0,r1              ;48
000038  6871              LDR      r1,[r6,#4]            ;48
00003a  eba00901          SUB      r9,r0,r1              ;48
00003e  f1b80f00          CMP      r8,#0                 ;49
000042  dd04              BLE      |L4.78|
000044  f1b90f00          CMP      r9,#0                 ;49
000048  dd01              BLE      |L4.78|
00004a  2001              MOVS     r0,#1                 ;49
00004c  e7eb              B        |L4.38|
                  |L4.78|
00004e  2000              MOVS     r0,#0                 ;49
000050  e7e9              B        |L4.38|
;;;51     
                          ENDP

000052  0000              DCW      0x0000
                  |L4.84|
000054  2e2e5c2e          DCB      "..\\..\\Middleware\\blue_angel\\src\\common\\bt_timer.c"
000058  2e5c4d69
00005c  64646c65
000060  77617265
000064  5c626c75
000068  655f616e
00006c  67656c5c
000070  7372635c
000074  636f6d6d
000078  6f6e5c62
00007c  745f7469
000080  6d65722e
000084  63      
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0

                          AREA ||i.bt_timer_cmp_by_timerid||, CODE, READONLY, ALIGN=2

                  bt_timer_cmp_by_timerid PROC
;;;18     
;;;19     bool bt_timer_cmp_by_timerid(const bt_linknode_t *node, const void *data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;20     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;21     	bt_timer_t *timer = NULL;
000008  2600              MOVS     r6,#0
;;;22     	uint32_t timer_id = 0;
00000a  2700              MOVS     r7,#0
;;;23     	BT_ASSERT(node && data);
00000c  b10c              CBZ      r4,|L5.18|
00000e  b105              CBZ      r5,|L5.18|
000010  e003              B        |L5.26|
                  |L5.18|
000012  2117              MOVS     r1,#0x17
000014  a007              ADR      r0,|L5.52|
000016  f7fffffe          BL       assert_failed
                  |L5.26|
;;;24     	
;;;25     	timer = (bt_timer_t *)node->next;
00001a  6826              LDR      r6,[r4,#0]
;;;26     	if (timer == NULL) {
00001c  b916              CBNZ     r6,|L5.36|
;;;27     		return false;
00001e  2000              MOVS     r0,#0
                  |L5.32|
;;;28     	}
;;;29     	timer_id = *(uint32_t *)data;
;;;30     	return timer->timer_id == timer_id;
;;;31     }
000020  e8bd81f0          POP      {r4-r8,pc}
                  |L5.36|
000024  682f              LDR      r7,[r5,#0]            ;29
000026  6870              LDR      r0,[r6,#4]            ;30
000028  42b8              CMP      r0,r7                 ;30
00002a  d101              BNE      |L5.48|
00002c  2001              MOVS     r0,#1                 ;30
00002e  e7f7              B        |L5.32|
                  |L5.48|
000030  2000              MOVS     r0,#0                 ;30
000032  e7f5              B        |L5.32|
;;;32     
                          ENDP

                  |L5.52|
000034  2e2e5c2e          DCB      "..\\..\\Middleware\\blue_angel\\src\\common\\bt_timer.c"
000038  2e5c4d69
00003c  64646c65
000040  77617265
000044  5c626c75
000048  655f616e
00004c  67656c5c
000050  7372635c
000054  636f6d6d
000058  6f6e5c62
00005c  745f7469
000060  6d65722e
000064  63      
000065  00                DCB      0
000066  00                DCB      0
000067  00                DCB      0

                          AREA ||i.bt_timer_find||, CODE, READONLY, ALIGN=2

                  bt_timer_find PROC
;;;112    
;;;113    bt_timer_t *bt_timer_find(uint32_t timer_id)
000000  b570              PUSH     {r4-r6,lr}
;;;114    {
000002  4604              MOV      r4,r0
;;;115    	bt_linknode_t *pre = NULL;
000004  2500              MOVS     r5,#0
;;;116    	pre = bt_linknode_travel_node(&bt_timer_list, bt_timer_cmp_by_timerid, (const void *)timer_id);
000006  4622              MOV      r2,r4
000008  4904              LDR      r1,|L6.28|
00000a  4805              LDR      r0,|L6.32|
00000c  f7fffffe          BL       bt_linknode_travel_node
000010  4605              MOV      r5,r0
;;;117    	if (pre) {
000012  b10d              CBZ      r5,|L6.24|
;;;118    		return (bt_timer_t *)(pre->next);
000014  6828              LDR      r0,[r5,#0]
                  |L6.22|
;;;119    	}
;;;120    	return NULL;
;;;121    }
000016  bd70              POP      {r4-r6,pc}
                  |L6.24|
000018  2000              MOVS     r0,#0                 ;120
00001a  e7fc              B        |L6.22|
;;;122    
                          ENDP

                  |L6.28|
                          DCD      bt_timer_cmp_by_timerid
                  |L6.32|
                          DCD      bt_timer_list

                          AREA ||i.bt_timer_start||, CODE, READONLY, ALIGN=2

                  bt_timer_start PROC
;;;51     
;;;52     bt_status_t bt_timer_start(uint32_t timer_id, uint32_t timer_length, uint32_t data, bt_timer_timeout_callback_t cb)
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;53     {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
;;;54     	bt_timer_t *timer = NULL;
00000c  2400              MOVS     r4,#0
;;;55     	bt_timer_duration_t duration = {0};
00000e  2000              MOVS     r0,#0
000010  9000              STR      r0,[sp,#0]
000012  9001              STR      r0,[sp,#4]
;;;56     	bt_linknode_t *pre = NULL;
000014  2600              MOVS     r6,#0
;;;57     	if (NULL != bt_timer_find(timer_id)) {
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       bt_timer_find
00001c  b110              CBZ      r0,|L7.36|
;;;58     		return BT_STATUS_FAIL;
00001e  2002              MOVS     r0,#2
                  |L7.32|
;;;59     	}
;;;60     
;;;61     	timer = (bt_timer_t *)bt_fixed_memory_allocate(BT_FIXED_MM_TIMER);
;;;62     	if (timer == NULL) {
;;;63     		return BT_STATUS_OUT_OF_MEMORY;
;;;64     	}
;;;65     	duration.current_tick = bt_os_layer_get_system_tick();
;;;66     	duration.duration = timer_length;
;;;67     	timer->timer_id = timer_id;
;;;68     	timer->data = data;
;;;69     	timer->timeout_cb = cb;
;;;70     	timer->time_ms = duration.current_tick + duration.duration;
;;;71     
;;;72     	pre = bt_linknode_travel_node(&bt_timer_list, bt_timer_cmp_by_timer_duration, (void *)&duration);
;;;73     	if (pre != NULL) {
;;;74     		bt_linknode_insert_node(pre, (bt_linknode_t *)timer, BT_NODE_FRONT);
;;;75     		if (pre == &bt_timer_list) {
;;;76     			/*update for the first timer*/
;;;77     			bt_timer_stop_timer();
;;;78     			bt_timer_start_timer(timer_length);
;;;79     			return BT_STATUS_SUCCESS;
;;;80     		}
;;;81     	}
;;;82     
;;;83     	return BT_STATUS_FAIL;
;;;84     }
000020  e8bd87fc          POP      {r2-r10,pc}
                  |L7.36|
000024  2000              MOVS     r0,#0                 ;61
000026  f7fffffe          BL       bt_fixed_memory_allocate
00002a  4604              MOV      r4,r0                 ;61
00002c  b90c              CBNZ     r4,|L7.50|
00002e  2020              MOVS     r0,#0x20              ;63
000030  e7f6              B        |L7.32|
                  |L7.50|
000032  f7fffffe          BL       bt_os_layer_get_system_tick
000036  9000              STR      r0,[sp,#0]            ;65
000038  9501              STR      r5,[sp,#4]            ;66
00003a  6067              STR      r7,[r4,#4]            ;67
00003c  f8c48008          STR      r8,[r4,#8]            ;68
000040  f8c49010          STR      r9,[r4,#0x10]         ;69
000044  e9dd0100          LDRD     r0,r1,[sp,#0]         ;70
000048  4408              ADD      r0,r0,r1              ;70
00004a  60e0              STR      r0,[r4,#0xc]          ;70
00004c  466a              MOV      r2,sp                 ;72
00004e  490b              LDR      r1,|L7.124|
000050  480b              LDR      r0,|L7.128|
000052  f7fffffe          BL       bt_linknode_travel_node
000056  4606              MOV      r6,r0                 ;72
000058  b176              CBZ      r6,|L7.120|
00005a  2201              MOVS     r2,#1                 ;74
00005c  4621              MOV      r1,r4                 ;74
00005e  4630              MOV      r0,r6                 ;74
000060  f7fffffe          BL       bt_linknode_insert_node
000064  4806              LDR      r0,|L7.128|
000066  4286              CMP      r6,r0                 ;75
000068  d106              BNE      |L7.120|
00006a  f7fffffe          BL       bt_timer_stop_timer
00006e  4628              MOV      r0,r5                 ;78
000070  f7fffffe          BL       bt_timer_start_timer
000074  2001              MOVS     r0,#1                 ;79
000076  e7d3              B        |L7.32|
                  |L7.120|
000078  2002              MOVS     r0,#2                 ;83
00007a  e7d1              B        |L7.32|
;;;85     
                          ENDP

                  |L7.124|
                          DCD      bt_timer_cmp_by_timer_duration
                  |L7.128|
                          DCD      bt_timer_list

                          AREA ||i.bt_timer_stop_all_timer||, CODE, READONLY, ALIGN=2

                  bt_timer_stop_all_timer PROC
;;;140    
;;;141    void bt_timer_stop_all_timer()
000000  b510              PUSH     {r4,lr}
;;;142    {
;;;143    	bt_linknode_t *tmp= NULL;
000002  2400              MOVS     r4,#0
;;;144    	bt_timer_stop_timer();
000004  f7fffffe          BL       bt_timer_stop_timer
;;;145    
;;;146    	while (bt_timer_list.next != NULL) {
000008  e008              B        |L8.28|
                  |L8.10|
;;;147    		tmp = bt_linknode_delete_node(&bt_timer_list, BT_NODE_FRONT);
00000a  2101              MOVS     r1,#1
00000c  4806              LDR      r0,|L8.40|
00000e  f7fffffe          BL       bt_linknode_delete_node
000012  4604              MOV      r4,r0
;;;148    		bt_fixed_memory_free(BT_FIXED_MM_TIMER, (uint8_t *)tmp);
000014  4621              MOV      r1,r4
000016  2000              MOVS     r0,#0
000018  f7fffffe          BL       bt_fixed_memory_free
                  |L8.28|
00001c  4802              LDR      r0,|L8.40|
00001e  6800              LDR      r0,[r0,#0]            ;146  ; bt_timer_list
000020  2800              CMP      r0,#0                 ;146
000022  d1f2              BNE      |L8.10|
;;;149    	}
;;;150    }
000024  bd10              POP      {r4,pc}
;;;151    
                          ENDP

000026  0000              DCW      0x0000
                  |L8.40|
                          DCD      bt_timer_list

                          AREA ||.data||, DATA, ALIGN=2

                  bt_timer_list
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Middleware\\blue_angel\\src\\common\\bt_timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_bt_timer_c_79facf84____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_bt_timer_c_79facf84____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_bt_timer_c_79facf84____REVSH|
#line 128
|__asm___10_bt_timer_c_79facf84____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
