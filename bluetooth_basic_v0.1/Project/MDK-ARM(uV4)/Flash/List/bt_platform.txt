; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bt_platform.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bt_platform.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\Middleware\blue_angel\inc -I..\..\Middleware\bt_callback_manager -I..\..\Middleware\blue_angel\btif -I..\..\Middleware\blue_angel\common -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\src\common -I..\..\Middleware\blue_angel\src\inc -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\platform\rtos -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\ut_manager\Cunit\Headers -I..\..\Middleware\ut_manager\Cunit\interface -I..\..\Middleware\blue_angel\platform\test -I..\..\Middleware\blue_angel\driver -I..\..\Middleware\blue_angel\src\core\hci -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=522 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DNDEBUG --omf_browse=.\flash\obj\bt_platform.crf ..\..\Middleware\blue_angel\platform\bt_platform.c]
                          THUMB

                          AREA ||i.bt_deinit||, CODE, READONLY, ALIGN=2

                  bt_deinit PROC
;;;76     
;;;77     void bt_deinit()
000000  b510              PUSH     {r4,lr}
;;;78     {
;;;79     	bt_os_layer_deinit_timer();
000002  f7fffffe          BL       bt_os_layer_deinit_timer
;;;80     	if (bt_task_mutex) {
000006  480a              LDR      r0,|L1.48|
000008  6800              LDR      r0,[r0,#0]  ; bt_task_mutex
00000a  b130              CBZ      r0,|L1.26|
;;;81     		bt_os_layer_delete_mutex(bt_task_mutex);
00000c  4808              LDR      r0,|L1.48|
00000e  6800              LDR      r0,[r0,#0]  ; bt_task_mutex
000010  f7fffffe          BL       bt_os_layer_delete_mutex
;;;82     		bt_task_mutex = 0;
000014  2000              MOVS     r0,#0
000016  4906              LDR      r1,|L1.48|
000018  6008              STR      r0,[r1,#0]  ; bt_task_mutex
                  |L1.26|
;;;83     	}
;;;84     	if (bt_task_semaphore) {
00001a  4806              LDR      r0,|L1.52|
00001c  6800              LDR      r0,[r0,#0]  ; bt_task_semaphore
00001e  b130              CBZ      r0,|L1.46|
;;;85     		bt_os_layer_delete_semaphore(bt_task_semaphore);
000020  4804              LDR      r0,|L1.52|
000022  6800              LDR      r0,[r0,#0]  ; bt_task_semaphore
000024  f7fffffe          BL       bt_os_layer_delete_semaphore
;;;86     		bt_task_semaphore = 0;
000028  2000              MOVS     r0,#0
00002a  4902              LDR      r1,|L1.52|
00002c  6008              STR      r0,[r1,#0]  ; bt_task_semaphore
                  |L1.46|
;;;87     	}
;;;88     }
00002e  bd10              POP      {r4,pc}
;;;89     
                          ENDP

                  |L1.48|
                          DCD      bt_task_mutex
                  |L1.52|
                          DCD      bt_task_semaphore

                          AREA ||i.bt_init||, CODE, READONLY, ALIGN=2

                  bt_init PROC
;;;61     
;;;62     void bt_init()
000000  b510              PUSH     {r4,lr}
;;;63     {
;;;64     	bt_os_layer_init_timer();
000002  f7fffffe          BL       bt_os_layer_init_timer
;;;65     	bt_os_layer_register_timer_callback(bt_timer_timeout_callback);
000006  4811              LDR      r0,|L2.76|
000008  f7fffffe          BL       bt_os_layer_register_timer_callback
;;;66     	if (bt_task_mutex == 0) {
00000c  4810              LDR      r0,|L2.80|
00000e  6800              LDR      r0,[r0,#0]  ; bt_task_mutex
000010  b958              CBNZ     r0,|L2.42|
;;;67     		bt_task_mutex = bt_os_layer_create_mutex();
000012  f7fffffe          BL       bt_os_layer_create_mutex
000016  490e              LDR      r1,|L2.80|
000018  6008              STR      r0,[r1,#0]  ; bt_task_mutex
;;;68     		BT_ASSERT(bt_task_mutex);
00001a  4608              MOV      r0,r1
00001c  6800              LDR      r0,[r0,#0]  ; bt_task_mutex
00001e  b100              CBZ      r0,|L2.34|
000020  e003              B        |L2.42|
                  |L2.34|
000022  2144              MOVS     r1,#0x44
000024  a00b              ADR      r0,|L2.84|
000026  f7fffffe          BL       assert_failed
                  |L2.42|
;;;69     	}
;;;70     	if (bt_task_semaphore == 0) {
00002a  4817              LDR      r0,|L2.136|
00002c  6800              LDR      r0,[r0,#0]  ; bt_task_semaphore
00002e  b958              CBNZ     r0,|L2.72|
;;;71     		bt_task_semaphore = bt_os_layer_create_semaphore();
000030  f7fffffe          BL       bt_os_layer_create_semaphore
000034  4914              LDR      r1,|L2.136|
000036  6008              STR      r0,[r1,#0]  ; bt_task_semaphore
;;;72     		BT_ASSERT(bt_task_semaphore);
000038  4608              MOV      r0,r1
00003a  6800              LDR      r0,[r0,#0]  ; bt_task_semaphore
00003c  b100              CBZ      r0,|L2.64|
00003e  e003              B        |L2.72|
                  |L2.64|
000040  2148              MOVS     r1,#0x48
000042  a004              ADR      r0,|L2.84|
000044  f7fffffe          BL       assert_failed
                  |L2.72|
;;;73     	}
;;;74     	//bt_driver_init();
;;;75     }
000048  bd10              POP      {r4,pc}
;;;76     
                          ENDP

00004a  0000              DCW      0x0000
                  |L2.76|
                          DCD      bt_timer_timeout_callback
                  |L2.80|
                          DCD      bt_task_mutex
                  |L2.84|
000054  2e2e5c2e          DCB      "..\\..\\Middleware\\blue_angel\\platform\\bt_platform.c"
000058  2e5c4d69
00005c  64646c65
000060  77617265
000064  5c626c75
000068  655f616e
00006c  67656c5c
000070  706c6174
000074  666f726d
000078  5c62745f
00007c  706c6174
000080  666f726d
000084  2e63    
000086  00                DCB      0
000087  00                DCB      0
                  |L2.136|
                          DCD      bt_task_semaphore

                          AREA ||i.bt_memcmp||, CODE, READONLY, ALIGN=1

                  bt_memcmp PROC
;;;114    
;;;115    bool bt_memcmp(void *des, void *src, uint32_t length)
000000  b570              PUSH     {r4-r6,lr}
;;;116    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;117    	return memcmp(des, src, length);
000008  4632              MOV      r2,r6
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       memcmp
000012  b108              CBZ      r0,|L3.24|
000014  2001              MOVS     r0,#1
                  |L3.22|
;;;118    }
000016  bd70              POP      {r4-r6,pc}
                  |L3.24|
000018  2000              MOVS     r0,#0                 ;117
00001a  e7fc              B        |L3.22|
;;;119    
                          ENDP


                          AREA ||i.bt_memcpy||, CODE, READONLY, ALIGN=1

                  bt_memcpy PROC
;;;109    
;;;110    void bt_memcpy(void *des, void *src, uint32_t length)
000000  b570              PUSH     {r4-r6,lr}
;;;111    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;112    	memcpy(des, src, length);
000008  4632              MOV      r2,r6
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       __aeabi_memcpy
;;;113    }
000012  bd70              POP      {r4-r6,pc}
;;;114    
                          ENDP


                          AREA ||i.bt_memset||, CODE, READONLY, ALIGN=1

                  bt_memset PROC
;;;104    
;;;105    void bt_memset(void *des, uint8_t value, uint32_t length)
000000  b570              PUSH     {r4-r6,lr}
;;;106    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;107    	memset(des, value, length);
000008  4622              MOV      r2,r4
00000a  4629              MOV      r1,r5
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       __aeabi_memset
;;;108    }
000012  bd70              POP      {r4-r6,pc}
;;;109    
                          ENDP


                          AREA ||i.bt_task_event_handler||, CODE, READONLY, ALIGN=2

                  bt_task_event_handler PROC
;;;33     
;;;34     void bt_task_event_handler()
000000  b510              PUSH     {r4,lr}
;;;35     {
;;;36     	uint32_t event = 0;
000002  2400              MOVS     r4,#0
;;;37     	bt_os_layer_disable_interrupt();
000004  f7fffffe          BL       bt_os_layer_disable_interrupt
;;;38     	event = bt_task_event;
000008  480c              LDR      r0,|L6.60|
00000a  6804              LDR      r4,[r0,#0]  ; bt_task_event
;;;39     	bt_os_layer_enable_interrupt();
00000c  f7fffffe          BL       bt_os_layer_enable_interrupt
;;;40     
;;;41     	bt_os_layer_take_mutex(bt_task_mutex);
000010  480b              LDR      r0,|L6.64|
000012  6800              LDR      r0,[r0,#0]  ; bt_task_mutex
000014  f7fffffe          BL       bt_os_layer_take_mutex
;;;42     	if (event & BT_TASK_EVENT_TIMER_EXPIRED) {
000018  f0040001          AND      r0,r4,#1
00001c  b110              CBZ      r0,|L6.36|
;;;43     		bt_timer_check_timeout_handler();
00001e  f7fffffe          BL       bt_timer_check_timeout_handler
000022  e006              B        |L6.50|
                  |L6.36|
;;;44     	} else if (event & BT_TASK_EVENT_RX) {
000024  f0040002          AND      r0,r4,#2
000028  b918              CBNZ     r0,|L6.50|
;;;45     
;;;46     	} else if (event & BT_TASK_EVENT_TX) {
00002a  f0040004          AND      r0,r4,#4
00002e  b900              CBNZ     r0,|L6.50|
;;;47     
;;;48     	} else if (event & BT_TASK_EVENT_OOM) {
000030  bf00              NOP      
                  |L6.50|
;;;49     
;;;50     	}
;;;51     	bt_os_layer_give_mutex(bt_task_mutex);
000032  4803              LDR      r0,|L6.64|
000034  6800              LDR      r0,[r0,#0]  ; bt_task_mutex
000036  f7fffffe          BL       bt_os_layer_give_mutex
;;;52     }
00003a  bd10              POP      {r4,pc}
;;;53     
                          ENDP

                  |L6.60|
                          DCD      bt_task_event
                  |L6.64|
                          DCD      bt_task_mutex

                          AREA ||i.bt_task_interrupt_trigger||, CODE, READONLY, ALIGN=2

                  bt_task_interrupt_trigger PROC
;;;23     
;;;24     static void bt_task_interrupt_trigger()
000000  b510              PUSH     {r4,lr}
;;;25     {
;;;26     	BT_ASSERT(bt_task_semaphore);
000002  480a              LDR      r0,|L7.44|
000004  6800              LDR      r0,[r0,#0]  ; bt_task_semaphore
000006  b100              CBZ      r0,|L7.10|
000008  e003              B        |L7.18|
                  |L7.10|
00000a  211a              MOVS     r1,#0x1a
00000c  a008              ADR      r0,|L7.48|
00000e  f7fffffe          BL       assert_failed
                  |L7.18|
;;;27     	if (bt_os_layer_is_isr_active()) {
000012  f7fffffe          BL       bt_os_layer_is_isr_active
000016  b120              CBZ      r0,|L7.34|
;;;28     		bt_os_layer_give_semaphore_from_isr(bt_task_semaphore);
000018  4804              LDR      r0,|L7.44|
00001a  6800              LDR      r0,[r0,#0]  ; bt_task_semaphore
00001c  f7fffffe          BL       bt_os_layer_give_semaphore_from_isr
000020  e003              B        |L7.42|
                  |L7.34|
;;;29     	} else {
;;;30     		bt_os_layer_give_semaphore(bt_task_semaphore);
000022  4802              LDR      r0,|L7.44|
000024  6800              LDR      r0,[r0,#0]  ; bt_task_semaphore
000026  f7fffffe          BL       bt_os_layer_give_semaphore
                  |L7.42|
;;;31     	}
;;;32     }
00002a  bd10              POP      {r4,pc}
;;;33     
                          ENDP

                  |L7.44|
                          DCD      bt_task_semaphore
                  |L7.48|
000030  2e2e5c2e          DCB      "..\\..\\Middleware\\blue_angel\\platform\\bt_platform.c"
000034  2e5c4d69
000038  64646c65
00003c  77617265
000040  5c626c75
000044  655f616e
000048  67656c5c
00004c  706c6174
000050  666f726d
000054  5c62745f
000058  706c6174
00005c  666f726d
000060  2e63    
000062  00                DCB      0
000063  00                DCB      0

                          AREA ||i.bt_task_take_semaphore||, CODE, READONLY, ALIGN=2

                  bt_task_take_semaphore PROC
;;;14     
;;;15     void bt_task_take_semaphore()
000000  b510              PUSH     {r4,lr}
;;;16     {
;;;17     	if (bt_os_layer_is_isr_active()) {
000002  f7fffffe          BL       bt_os_layer_is_isr_active
000006  b120              CBZ      r0,|L8.18|
;;;18     		bt_os_layer_take_semaphore_from_isr(bt_task_semaphore);
000008  4805              LDR      r0,|L8.32|
00000a  6800              LDR      r0,[r0,#0]  ; bt_task_semaphore
00000c  f7fffffe          BL       bt_os_layer_take_semaphore_from_isr
000010  e005              B        |L8.30|
                  |L8.18|
;;;19     	} else {
;;;20     		bt_os_layer_take_semaphore(bt_task_semaphore, portMAX_DELAY);
000012  f04f31ff          MOV      r1,#0xffffffff
000016  4802              LDR      r0,|L8.32|
000018  6800              LDR      r0,[r0,#0]  ; bt_task_semaphore
00001a  f7fffffe          BL       bt_os_layer_take_semaphore
                  |L8.30|
;;;21     	}
;;;22     }
00001e  bd10              POP      {r4,pc}
;;;23     
                          ENDP

                  |L8.32|
                          DCD      bt_task_semaphore

                          AREA ||i.bt_timer_get_current_tick||, CODE, READONLY, ALIGN=1

                  bt_timer_get_current_tick PROC
;;;99     
;;;100    uint32_t bt_timer_get_current_tick()
000000  b510              PUSH     {r4,lr}
;;;101    {
;;;102    	return bt_os_layer_get_system_tick();
000002  f7fffffe          BL       bt_os_layer_get_system_tick
;;;103    }
000006  bd10              POP      {r4,pc}
;;;104    
                          ENDP


                          AREA ||i.bt_timer_start_timer||, CODE, READONLY, ALIGN=1

                  bt_timer_start_timer PROC
;;;89     
;;;90     void bt_timer_start_timer(uint32_t timer_length)
000000  b510              PUSH     {r4,lr}
;;;91     {
000002  4604              MOV      r4,r0
;;;92     	bt_os_layer_start_timer(timer_length);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       bt_os_layer_start_timer
;;;93     }
00000a  bd10              POP      {r4,pc}
;;;94     
                          ENDP


                          AREA ||i.bt_timer_stop_timer||, CODE, READONLY, ALIGN=1

                  bt_timer_stop_timer PROC
;;;94     
;;;95     void bt_timer_stop_timer()
000000  b510              PUSH     {r4,lr}
;;;96     {
;;;97     	bt_os_layer_stop_timer();
000002  f7fffffe          BL       bt_os_layer_stop_timer
;;;98     }
000006  bd10              POP      {r4,pc}
;;;99     
                          ENDP


                          AREA ||i.bt_timer_timeout_callback||, CODE, READONLY, ALIGN=2

                  bt_timer_timeout_callback PROC
;;;53     
;;;54     static void bt_timer_timeout_callback()
000000  b510              PUSH     {r4,lr}
;;;55     {
;;;56     	bt_os_layer_disable_interrupt();
000002  f7fffffe          BL       bt_os_layer_disable_interrupt
;;;57     	bt_task_event |= BT_TASK_EVENT_TIMER_EXPIRED;
000006  4805              LDR      r0,|L12.28|
000008  6800              LDR      r0,[r0,#0]  ; bt_task_event
00000a  f0400001          ORR      r0,r0,#1
00000e  4903              LDR      r1,|L12.28|
000010  6008              STR      r0,[r1,#0]  ; bt_task_event
;;;58     	bt_os_layer_enable_interrupt();
000012  f7fffffe          BL       bt_os_layer_enable_interrupt
;;;59     	bt_task_interrupt_trigger();
000016  f7fffffe          BL       bt_task_interrupt_trigger
;;;60     }
00001a  bd10              POP      {r4,pc}
;;;61     
                          ENDP

                  |L12.28|
                          DCD      bt_task_event

                          AREA ||.data||, DATA, ALIGN=2

                  bt_task_mutex
                          DCD      0x00000000
                  bt_task_event
                          DCD      0x00000000
                  bt_task_semaphore
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Middleware\\blue_angel\\platform\\bt_platform.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_bt_platform_c_4cab87bb____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_bt_platform_c_4cab87bb____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_bt_platform_c_4cab87bb____REVSH|
#line 128
|__asm___13_bt_platform_c_4cab87bb____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
